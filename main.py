import sys
import os
import cv2

from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QMessageBox
# Import Ui_MainWindow class from UiMainApp.py generated by uic module
from GUI import Ui_MainWindow
# Import mip for my own medical image processing functions and class(es)
from mip import niireader
#from Filter import img_filtering


class MainFramework(QMainWindow,Ui_MainWindow):
	
	def __init__(self):

		QMainWindow.__init__(self)

		self.setupUi(self)
		self.setWindowTitle("Medical Image Viewer")
		self.actionOpen_File.triggered.connect(self.open_File)
		
		#Default Values
		self.nii_file = None
		self.img_displayed = None
		self.view = 0 #"Axial"/"Coronal"/"Sagittal"
		self.ax_Button.toggle()
		self.filter_Group.setEnabled(False)
		self.spinBox.setEnabled(False)

		#GUI Interactions

		#Slice Selector Widgets
		self.slice_Slider.valueChanged.connect(lambda: self.refreshPlot())
		self.slice_Slider.sliderMoved.connect(lambda: self.changeSpinBox())
		self.spinBox.valueChanged.connect(lambda: self.changeSlider())

		#View Menu Interactions
		self.ax_Button.clicked.connect(lambda: self.changeView())
		self.sag_Button.clicked.connect(lambda: self.changeView())
		self.cor_Button.clicked.connect(lambda: self.changeView())
		self.reset_Button.clicked.connect(lambda: self.resetImg())

		#Filter Menu Interaction
		self.filter_Enable.clicked.connect(lambda: self.enableFilter())
		self.blur_Button.clicked.connect(lambda: self.blur_FilterValues())
		self.gauss_Button.clicked.connect(lambda: self.gauss_FilterValues())

		self.kernel_Slider.valueChanged.connect(lambda: self.refreshPlot())
		self.kernel_Slider.sliderMoved.connect(lambda: self.lcdNumber_1.display(self.kernel_Slider.value()))
		self.x_Slider.valueChanged.connect(lambda: self.refreshPlot())
		self.x_Slider.sliderMoved.connect(lambda: self.lcdNumber_2.display(self.x_Slider.value()))
		self.y_Slider.valueChanged.connect(lambda: self.refreshPlot())
		self.y_Slider.sliderMoved.connect(lambda: self.lcdNumber_3.display(self.y_Slider.value()))

	def open_File(self):
		path = os.path.join(os.path.dirname(sys.argv[0]))
		file_dialog = QFileDialog(self,"Open File",path,"Na√Øve Image Formats (*.nii *.nii.gz)")
		file_dialog.setAcceptMode(QFileDialog.AcceptOpen)
		file_dialog.setFileMode(QFileDialog.ExistingFiles)

		if file_dialog.exec_() == file_dialog.Accepted:
			file_path = file_dialog.selectedFiles()[0]

			self.label_1.setText("File Path: " + file_path)
			self.label_1.adjustSize()
			self.nii_file = niireader(file_path)
			self.spinBox.setEnabled(True)
			self.refreshPlot()
			self.resetWindowValues()

		else:
			print("Operation Failed")

	def refreshPlot(self):
		if self.nii_file:
			max_val = self.nii_file.getSliceMax(view=self.view)
			self.value_Max.setText(str(max_val))
			self.slice_Slider.setMaximum(max_val)
			self.spinBox.setMaximum(max_val)
			slice_num = self.slice_Slider.value()
			mpl = self.simple_view.canvas
			mpl.ax.clear()
			self.img_displayed = self.nii_file.getSlice(slice=slice_num, view=self.view).T

			if self.gauss_Button.isChecked():
				self.img_displayed = cv2.GaussianBlur(self.img_displayed,ksize = (0,0),sigmaX = self.x_Slider.value(),sigmaY = self.y_Slider.value())

			if self.blur_Button.isChecked():
				self.img_displayed = cv2.blur(self.img_displayed,ksize = (self.kernel_Slider.value(),self.kernel_Slider.value()))

			mpl.ax.imshow(self.img_displayed, cmap="gray", origin="lower")
			mpl.draw()

	def resetWindowValues(self):
		self.value_Min.setText("0")
		self.slice_Slider.setValue(0)
		self.spinBox.setMinimum(0)
		self.spinBox.setValue(0)
		self.filter_Group.setEnabled(False)
		self.ax_Button.toggle()

	def resetImg(self):
		self.gauss_Button.setAutoExclusive(False)
		self.blur_Button.setAutoExclusive(False)
		self.gauss_Button.setChecked(False)
		self.blur_Button.setChecked(False)
		self.filter_Group.setEnabled(False)
		self.gauss_Button.setAutoExclusive(True)
		self.blur_Button.setAutoExclusive(True)
		
		self.refreshPlot()

	def changeSpinBox(self):
		if self.nii_file:
			self.spinBox.setValue(self.slice_Slider.value())

	def changeSlider(self):
		if self.nii_file:
			self.slice_Slider.setValue(self.spinBox.value())

	def changeView(self):
		if self.nii_file:
			if self.ax_Button.isChecked():
				self.view = 0
			if self.sag_Button.isChecked(): 
				self.view = 1
			if self.cor_Button.isChecked(): 
				self.view = 2

			self.refreshPlot()

	def enableFilter(self):
		if self.nii_file:
			self.filter_Group.setEnabled(True)
			self.blur_Button.click()
		else:
			error_msg = QMessageBox()
			error_msg.setIcon(QMessageBox.Critical)
			error_msg.setText("Not File Found")
			error_msg.setWindowTitle("Error")
			error_msg.exec_()

	def blur_FilterValues(self):
		self.kernel_Slider.setEnabled(True)
		self.x_Slider.setEnabled(False)
		self.y_Slider.setEnabled(False)
		self.lcdNumber_2.setEnabled(False)
		self.lcdNumber_3.setEnabled(False)
		self.kernel_Slider.setMinimum(1)
		self.kernel_Slider.setMaximum(10)
		self.kernel_Slider.setValue(5)

		self.refreshPlot()

	def gauss_FilterValues(self):
		self.kernel_Slider.setEnabled(False)
		self.x_Slider.setEnabled(True)
		self.y_Slider.setEnabled(True)
		self.lcdNumber_2.setEnabled(True)
		self.lcdNumber_3.setEnabled(True)

		self.x_Slider.setMinimum(1)
		self.x_Slider.setMaximum(10)
		self.x_Slider.setValue(5)

		self.y_Slider.setMinimum(1)
		self.y_Slider.setMaximum(10)
		self.y_Slider.setValue(5)

		self.refreshPlot()

if __name__ == "__main__":
 
    app = QApplication(sys.argv)
    MyApplication = MainFramework()
    MyApplication.show()
    sys.exit(app.exec_()) 
